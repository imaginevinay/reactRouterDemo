{"version":3,"sources":["logo.svg","components/Home.js","components/About.js","components/News.js","components/Navbar.js","components/Items.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","About","useStyles","makeStyles","root","maxWidth","maxHeight","marginTop","margin","imgProp","cardsStack","display","gridTemplateColumns","gridAutoRows","gridGap","marginBottom","center","textAlign","News","classes","useEffect","fetchTopHeadlines","useState","topNews","setItems","a","fetch","json","data","topHeadlines","articles","console","log","className","map","eachArticle","Card","elevation","CardActionArea","src","urlToImage","alt","CardContent","Typography","gutterBottom","variant","component","title","color","source","name","CardActions","Button","size","href","url","Navbar","linkStyle","textDecoration","Logo","style","to","Items","fetchItemDetail","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,+KCQ5BC,G,YANF,WACT,OACI,0CCIOC,EAND,WACV,OACI,2C,yFCKFC,EAAYC,YAAW,CACzBC,KAAM,CACLC,SAAS,IACTC,UAAU,IACVC,UAAU,GACVC,OAAO,QAGRC,QAAQ,CACJH,UAAU,IACVD,SAAS,KAEbK,WAAW,CACPC,QAAS,OACTC,oBAAqB,iBACrBC,aAAc,OACdC,QAAS,QACTC,aAAa,KAEjBC,OAAO,CACHL,QAAQ,QACRM,UAAU,YA+CHC,EA3CF,WACT,IAAMC,EAAUjB,IAChBkB,qBAAU,WACNC,MACF,IAJW,MAMcC,mBAAS,IANvB,mBAMNC,EANM,KAMEC,EANF,KAQPH,EAAiB,uCAAG,8BAAAI,EAAA,sEACIC,MAAM,0FADV,8BACqGC,OADrG,OAChBC,EADgB,OAEhBC,EAAeD,EAAKE,SAC1BC,QAAQC,IAAI,OAAOH,GACnBL,EAASK,GAJa,2CAAH,qDAOvB,OACI,yBAAKI,UAAWd,EAAQT,YACnBa,EAAQW,KAAI,SAAAC,GAAW,OAChB,kBAACC,EAAA,EAAD,CAAMH,UAAWd,EAAQf,KAAMiC,UAAW,GAC1C,kBAACC,EAAA,EAAD,KACA,yBAAKL,UAAWd,EAAQV,QAAS8B,IAAKJ,EAAYK,WAAYC,IAAI,KAClE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,IAAIC,UAAU,KAC9CX,EAAYY,OAEb,kBAACJ,EAAA,EAAD,CAAYE,QAAQ,QAAQG,MAAM,gBAAgBF,UAAU,KAC3DX,EAAYc,OAAOC,QAIxB,kBAACC,EAAA,EAAD,CAAalB,UAAWd,EAAQH,QAChC,kBAACoC,EAAA,EAAD,CAAQC,KAAK,QAAQL,MAAM,WAA3B,SAGA,kBAACI,EAAA,EAAD,CAAQC,KAAK,QAAQL,MAAM,WACvB,uBAAGM,KAAMnB,EAAYoB,KAArB,sB,iCCxCTC,EAxBA,WACb,IAAMC,EAAY,CAChBT,MAAO,QACPU,eAAgB,QAGlB,OACE,6BACE,yBAAKnB,IAAKoB,IAAMlB,IAAI,KACpB,kBAAC,IAAD,CAAMmB,MAAOH,EAAWI,GAAG,KACzB,6CAEF,wBAAI5B,UAAU,aACZ,kBAAC,IAAD,CAAM2B,MAAOH,EAAWI,GAAG,SACzB,qCAEF,kBAAC,IAAD,CAAMD,MAAOH,EAAWI,GAAG,UACzB,yCCPKC,EAZD,WACV1C,qBAAU,WACN2C,MACF,IAEF,IAAMA,EAAe,uCAAG,sBAAAtC,EAAA,0FAAH,qDAErB,OACI,qC,QCeOuC,MAhBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgC,KAAK,IAAIC,OAAK,EAACpB,UAAa9C,IACnC,kBAAC,IAAD,CAAOiE,KAAK,SAASnB,UAAa7C,IAClC,kBAAC,IAAD,CAAOgE,KAAK,QAAQC,OAAK,EAACpB,UAAa5B,IACvC,kBAAC,IAAD,CAAO+C,KAAK,YAAYnB,UAAagB,QCP3BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.55a6f732.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Home = ()=>{\n    return (\n        <h3>HomePage</h3>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst About = ()=>{\n    return (\n        <h3>About Page</h3>\n    )\n}\n\nexport default About;","import React,{useState,useEffect} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    root: {\n     maxWidth:300,\n     maxHeight:500,\n     marginTop:50,\n     margin:\"auto\" ,   \n    },\n\n    imgProp:{\n        maxHeight:200,\n        maxWidth:290\n    },\n    cardsStack:{\n        display: \"grid\", \n        gridTemplateColumns: \"repeat(3, 1fr)\",\n        gridAutoRows: \"auto\",         \n        gridGap: \"-1rem\",\n        marginBottom:200\n    },\n    center:{\n        display:\"block\",\n        textAlign:\"center\"\n    }\n  });\n\nconst News = ()=>{\n    const classes = useStyles();\n    useEffect(()=>{\n        fetchTopHeadlines();\n    },[])\n\n    const [topNews,setItems] = useState([])\n    \n    const fetchTopHeadlines = async() => {\n        const data = await (await fetch(\"http://newsapi.org/v2/top-headlines?country=in&apiKey=9406929465d649e6835539889a61095b\")).json();\n        const topHeadlines = data.articles;\n        console.log(\"data\",topHeadlines);\n        setItems(topHeadlines);\n    }\n\n    return (\n        <div className={classes.cardsStack}>\n            {topNews.map(eachArticle =>(\n                    <Card className={classes.root} elevation={3}>\n                    <CardActionArea>\n                    <img className={classes.imgProp} src={eachArticle.urlToImage} alt=\"\"/>\n                    <CardContent>\n                        <Typography gutterBottom variant=\"p\" component=\"p\">\n                        {eachArticle.title}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {eachArticle.source.name}\n                        </Typography>\n                    </CardContent>\n                    </CardActionArea>\n                    <CardActions className={classes.center}>\n                    <Button size=\"small\" color=\"primary\">\n                        Share\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">                    \n                        <a href={eachArticle.url}>Learn More</a>\n                    </Button>\n                    </CardActions>\n                </Card>\n            ))}    \n              </div>\n    )}\n\nexport default News","import React from \"react\";\nimport \"./Navbar.css\";\nimport Logo from \"../logo.svg\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  const linkStyle = {\n    color: \"white\",\n    textDecoration: \"none\"\n  };\n\n  return (\n    <nav>\n      <img src={Logo} alt=\"\" />\n      <Link style={linkStyle} to=\"/\">\n        <h3>React_Router</h3>\n      </Link>\n      <ul className=\"nav-Links\">\n        <Link style={linkStyle} to=\"/news\">\n          <li>News</li>\n        </Link>\n        <Link style={linkStyle} to=\"/about\">\n          <li>About</li>\n        </Link>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React,{useEffect} from 'react';\n\n\nconst Items = () => {\n    useEffect(()=>{\n        fetchItemDetail()\n    },[])\n\n    const fetchItemDetail = async ()=>{}\n\n    return (\n        <h1>Item</h1>\n    )\n}\n\nexport default Items","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport News from \"./components/News\";\nimport Navbar from \"./components/Navbar\";\nimport Items from './components/Items';\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact component = {Home} />\n          <Route path=\"/about\" component = {About}/>\n          <Route path=\"/news\" exact component = {News}/>\n          <Route path=\"/news/:id\" component = {Items} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}